strategy:
  matrix:
    windows:
      jobArchName: 'Windows'
      imageName: 'windows-latest'
      artifactPrefix: ''
      artifactSuffix: ''
      testers: ';fx;core2.1;core3;core3.1;core5;'
      generateDocFX: 'false'
      pushNuGet: 'true'
    linux:
      jobArchName: 'Linux'
      imageName: 'ubuntu-latest'
      artifactPrefix: '~dbg.linux.'
      artifactSuffix: ''
      testers: ';mono;core2.1;core3;core3.1;core5;'
      generateDocFX: 'false'
      pushNuGet: 'false'
    macos:
      jobArchName: 'macOS'
      imageName: 'macOS-latest'
      artifactPrefix: '~dbg.macos.'
      artifactSuffix: ''
      testers: ';mono;core2.1;core3;core3.1;core5;'
      generateDocFX: 'false'
      pushNuGet: 'false'
  maxParallel: 4

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'

name: '$(Date:yy.MM.dd)$(Rev:.rr)'

pool:
  vmImage: '$(imageName)'

steps:
- checkout: self
  clean: false
  fetchDepth: 2
  lfs: false
  submodules: recursive

# Run pre-build steps.
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 2.1.x'
  inputs:
    packageType: sdk
    version: '2.1.x'
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 3.0.x'
  inputs:
    packageType: sdk
    version: '3.0.x'
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 3.1.x'
  inputs:
    packageType: sdk
# FIXME: Upgrade to 3.1.x once https://github.com/dotnet/sourcelink/issues/524 is fixed.
    version: '3.1.102'
- task: UseDotNet@2
# FIXME: Always install .NET 5 once https://github.com/dotnet/sourcelink/issues/524 is fixed.
  condition: contains(variables.testers, ';core5;')
  displayName: 'Install .NET Core SDK 5.0.x'
  inputs:
    packageType: sdk
    version: '5.0.x'
# FIXME: Remove includePreviewVersions once .NET 5.0 releases.
    includePreviewVersions: true
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Restore'
  inputs:
    command: 'restore'
    projects: 'ExtendedCompiler*/*.csproj'

# Build using core. Mono's msbuild started to cause too many issues.
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Build'
  inputs:
    command: 'build'
    projects: 'ExtendedCompiler*/*.csproj'
    arguments: '--configuration $(buildConfiguration) "/p:Configuration=$(buildConfiguration)"'

# Create and "publish" main artifacts.
- template: 'postbuild.yml'
  parameters:
    targetFramework: 'net35'
- template: 'postbuild.yml'
  parameters:
    targetFramework: 'net40'
- template: 'postbuild.yml'
  parameters:
    targetFramework: 'netstandard2.0'

# Create and "publish" nupkg artifacts.
- task: DotNetCoreCLI@2
  displayName: 'Artifacts: Pack: nupkgs'
  continueOnError: true
  inputs:
    command: 'pack'
    nobuild: true
    configuration: '$(buildConfiguration)'
    versioningScheme: 'byBuildNumber'
    packagesToPack: 'ExtendedCompiler.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)/nupkgs'
- task: PublishBuildArtifacts@1
  displayName: 'Artifacts: Publish: nupkgs'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/nupkgs'
    artifactName: '$(artifactPrefix)nupkgs$(artifactSuffix)'
    publishLocation: 'Container'
- task: NuGetCommand@2
  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.pushNuGet, 'true'))
  displayName: 'Artifacts: Push: nupkgs'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/nupkgs/*.nupkg'
- task: NuGetCommand@2
  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.pushNuGet, 'true'))
  displayName: 'Artifacts: Push: ExtendedCompiler to nuget.org'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/nupkgs/ExtendedCompiler.*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet.org'
