strategy:
  matrix:
    windows:
      jobArchName: 'Windows'
      imageName: 'windows-latest'
      artifactPrefix: ''
      artifactSuffix: ''
      testers: ';fx;core2.1;core3;core3.1;core5;'
      generateDocFX: 'false'
      pushNuGet: 'true'
    linux:
      jobArchName: 'Linux'
      imageName: 'ubuntu-latest'
      artifactPrefix: '~dbg.linux.'
      artifactSuffix: ''
      testers: ';mono;core2.1;core3;core3.1;core5;'
      generateDocFX: 'false'
      pushNuGet: 'false'
    macos:
      jobArchName: 'macOS'
      imageName: 'macOS-latest'
      artifactPrefix: '~dbg.macos.'
      artifactSuffix: ''
      testers: ';mono;core2.1;core3;core3.1;core5;'
      generateDocFX: 'false'
      pushNuGet: 'false'
  maxParallel: 4

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  xunit: '{0}{1}/.nuget/packages/xunit.runner.console/2.4.1/tools/{2}/xunit.console.{3} MonoMod.UnitTest/bin/Release/{2}/MonoMod.UnitTest.dll -xml testresults.{4}.{2}.xml {5}'

name: '$(Date:yy.MM.dd)$(Rev:.rr)'

pool:
  vmImage: '$(imageName)'

steps:
- checkout: self
  clean: false
  fetchDepth: 2
  lfs: false
  submodules: recursive

# Run pre-build steps.
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 2.1.x'
  inputs:
    packageType: sdk
    version: '2.1.x'
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 3.0.x'
  inputs:
    packageType: sdk
    version: '3.0.x'
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 3.1.x'
  inputs:
    packageType: sdk
# FIXME: Upgrade to 3.1.x once https://github.com/dotnet/sourcelink/issues/524 is fixed.
# Example failing build with 3.1.200: https://dev.azure.com/MonoMod/MonoMod/_build/results?buildId=142&view=results
    version: '3.1.102'
- task: UseDotNet@2
# FIXME: Always install .NET 5 once https://github.com/dotnet/sourcelink/issues/524 is fixed.
  condition: contains(variables.testers, ';core5;')
  displayName: 'Install .NET Core SDK 5.0.x'
  inputs:
    packageType: sdk
    version: '5.0.x'
# FIXME: Remove includePreviewVersions once .NET 5.0 releases.
    includePreviewVersions: true
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Restore'
  inputs:
    command: 'restore'
    projects: 'MonoMod*/*.csproj'

# Build using core. Mono's msbuild started to cause too many issues.
- task: DotNetCoreCLI@2
  displayName: 'dotnet: Build'
  inputs:
    command: 'build'
    projects: 'MonoMod*/*.csproj'
    arguments: '--configuration $(buildConfiguration) "/p:Configuration=$(buildConfiguration)"'

# Create and "publish" main artifacts.
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'net35'
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'net40'
- template: 'azure-pipelines-postbuild.yml'
  parameters:
    targetFramework: 'netstandard2.0'

# Create and "publish" nupkg artifacts.
- task: DotNetCoreCLI@2
  displayName: 'Artifacts: Pack: nupkgs'
  continueOnError: true
  inputs:
    command: 'pack'
    nobuild: true
    configuration: '$(buildConfiguration)'
    versioningScheme: 'byBuildNumber'
    packagesToPack: 'MonoMod@(|.Common|.Utils|.RuntimeDetour|.RuntimeDetour.HookGen)/*.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)/nupkgs'
- task: PublishBuildArtifacts@1
  displayName: 'Artifacts: Publish: nupkgs'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/nupkgs'
    artifactName: '$(artifactPrefix)nupkgs$(artifactSuffix)'
    publishLocation: 'Container'
- task: NuGetCommand@2
  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.pushNuGet, 'true'))
  displayName: 'Artifacts: Push: nupkgs'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/nupkgs/*.nupkg'
    publishVstsFeed: '572c97eb-dbaa-4a55-90e5-1d05431535bd/72ad568d-c548-4599-8b0a-9ea52b45bbbd'
- task: PowerShell@2
  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.pushNuGet, 'true'))
  displayName: 'Artifacts: Prepare: MonoMod.Common to nuget.org'
  continueOnError: true
  inputs:
    filePath: 'azure-pipelines-prepushcommon.ps1'
    arguments: '$(Build.ArtifactStagingDirectory)/nupkgs/MonoMod.Common.*.nupkg'
- task: NuGetCommand@2
  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.pushNuGet, 'true'))
  displayName: 'Artifacts: Push: MonoMod.Common to nuget.org'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/nupkgs/MonoMod.Common.*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'NuGet MonoMod'

# Run tests.
# I've tried to simplify this mess. It's impossible. --ade
- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';fx;'))
  displayName: 'Test: fx: net452'
  inputs:
    script: ${{format(variables.xunit, '', '%userprofile%', 'net452', 'exe', 'fx', '')}}
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';fx;'))
  displayName: 'Test: Publish: fx: net452'
  inputs:
    testResultsFormat: 'xUnit'
    testResultsFiles: '**/testresults.fx.net452.xml'
    testRunTitle: 'Tests @ $(jobArchName) fx net452'

- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';mono;'))
  displayName: 'Test: mono: net452'
  inputs:
    script: ${{format(variables.xunit, 'mono --debug ', '~', 'net452', 'exe', 'mono', '')}}
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';mono;'))
  displayName: 'Test: Publish: mono: net452'
  inputs:
    testResultsFormat: 'xUnit'
    testResultsFiles: '**/testresults.mono.net452.xml'
    testRunTitle: 'Tests @ $(jobArchName) mono net452'

- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';monoslow;'))
  displayName: 'Test: monoslow: net452'
  inputs:
    script: ${{format(variables.xunit, 'mono --debug ', '~', 'net452', 'exe', 'monoslow', '-parallel none -appdomains denied -verbose')}}
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';monoslow;'))
  displayName: 'Test: Publish: monoslow: net452'
  inputs:
    testResultsFormat: 'xUnit'
    testResultsFiles: '**/testresults.monoslow.net452.xml'
    testRunTitle: 'Tests @ $(jobArchName) monoslow net452'

- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';core2.1;'))
  displayName: 'Test: core: netcoreapp2.1'
  inputs:
    script: 'dotnet test --no-build --configuration ${{variables.buildConfiguration}} -f netcoreapp2.1 MonoMod.UnitTest/MonoMod.UnitTest.csproj -l:"trx;LogFileName=testresults.core.netcoreapp2.1.trx"'
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';core2.1;'))
  displayName: 'Test: Publish: core: netcoreapp2.1'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/testresults.core.netcoreapp2.1.trx'
    testRunTitle: 'Tests @ $(jobArchName) core netcoreapp2.1'

- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';core3;'))
  displayName: 'Test: core: netcoreapp3.0'
  inputs:
    script: 'dotnet test --no-build --configuration ${{variables.buildConfiguration}} -f netcoreapp3.0 MonoMod.UnitTest/MonoMod.UnitTest.csproj -l:"trx;LogFileName=testresults.core.netcoreapp3.0.trx"'
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';core3;'))
  displayName: 'Test: Publish: core: netcoreapp3.0'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/testresults.core.netcoreapp3.0.trx'
    testRunTitle: 'Tests @ $(jobArchName) core netcoreapp3.0'

- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';core3.1;'))
  displayName: 'Test: core: netcoreapp3.1'
  inputs:
    script: 'dotnet test --no-build --configuration ${{variables.buildConfiguration}} -f netcoreapp3.1 MonoMod.UnitTest/MonoMod.UnitTest.csproj -l:"trx;LogFileName=testresults.core.netcoreapp3.1.trx"'
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';core3.1;'))
  displayName: 'Test: Publish: core: netcoreapp3.1'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/testresults.core.netcoreapp3.1.trx'
    testRunTitle: 'Tests @ $(jobArchName) core netcoreapp3.1'

- task: CmdLine@2
  condition: and(always(), contains(variables.testers, ';core5;'))
  displayName: 'Test: core: netcoreapp5.0'
  inputs:
    script: 'dotnet test --no-build --configuration ${{variables.buildConfiguration}} -f netcoreapp5.0 MonoMod.UnitTest/MonoMod.UnitTest.csproj -l:"trx;LogFileName=testresults.core.netcoreapp5.0.trx"'
- task: PublishTestResults@2
  condition: and(always(), contains(variables.testers, ';core5;'))
  displayName: 'Test: Publish: core: netcoreapp5.0'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/testresults.core.netcoreapp5.0.trx'
    testRunTitle: 'Tests @ $(jobArchName) core netcoreapp5.0'

# Rebuild and publish the DocFX page.
- task: PowerShell@2
  condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables.generateDocFX, 'true'))
  displayName: 'DocFX'
  continueOnError: true
  inputs:
    filePath: 'azure-pipelines-docfx.ps1'
    arguments: '$(GitHubBotName) $(GitHubBotEmail) $(GitHubBotToken)'
